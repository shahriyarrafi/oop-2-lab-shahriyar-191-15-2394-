{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Lab 6.ipynb",
      "private_outputs": true,
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/shahriyarrafi/oop-2-lab-shahriyar-191-15-2394-/blob/main/Lab_6\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gWRLBROOvmVT"
      },
      "source": [
        "#Create a Dictionary\n",
        "using `dict()` or `{}` "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zaZbzCm3uNV_"
      },
      "source": [
        "city = dict()\n",
        "city"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BYsbYTSevsEP"
      },
      "source": [
        "city"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QpID9cvRvzoF"
      },
      "source": [
        "city['Dhanmondi'] = 1205"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1La140wpwM2m"
      },
      "source": [
        "city['Cantonment'] = 1206"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dIq2kt1XwPFU"
      },
      "source": [
        "city"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0ISxlLeuwQAD"
      },
      "source": [
        "# Determining if a Dictionary Is Empty or not\n",
        "len(city)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HUlIjd5wwZKr"
      },
      "source": [
        "# Another way\n",
        "# Determining if a Dictionary Is Empty or not\n",
        "if city:\n",
        "  print('not empty')\n",
        "else:\n",
        "  print('empty')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pbMa-FcbxX5b"
      },
      "source": [
        "Homework - *If want to empty a dictionary then use `.clear()` method*"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lx5hu7RVw6HL"
      },
      "source": [
        "## *Self-check* \n",
        "True/False - Are Dictionaries may contain duplicate keys ??"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gDWm_jwTwq-S"
      },
      "source": [
        "# Remember indexing isn't work \n",
        "city[0]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BK7DSUNuyFc0"
      },
      "source": [
        "Iterate a **dictionary** "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XG3CwZU1xR2K"
      },
      "source": [
        "print(city)\n",
        "for area, code in city.items():\n",
        "  print(f'{area}â€™s area code is {code}')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "B0FVk9KB0GeN"
      },
      "source": [
        "## Dictionary operations"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xpo-MBuFyM5u"
      },
      "source": [
        "# Accessing a value \n",
        "city[\"Cantonment\"]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_p85jBSWyb82"
      },
      "source": [
        "# Update a value\n",
        "city['Cantonment'] = 1202\n",
        "# print to check\n",
        "city"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bax4P8mR1Oo8"
      },
      "source": [
        "# updating/insert both key-value respectively\n",
        "city.update({'Mohammadpur':1207})\n",
        "# print\n",
        "city"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ersvcKLu2BLy"
      },
      "source": [
        "city.update({'Mohammadpur Housing':\t1207})\n",
        "city"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mP3ZBUDc2OeN"
      },
      "source": [
        "Magic ? ? "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VbEMF6tq2VQv"
      },
      "source": [
        "city.update({'Mohammadpur': 1208})\n",
        "city"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Jd0i5yjC2mwk"
      },
      "source": [
        "hurrah ! working ~~~"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fEmPYGjKynUP"
      },
      "source": [
        "# Adding a new key-value pair\n",
        "city['Mirpur'] = 1212\n",
        "# print to check\n",
        "city"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xuKqNDd2y1eV"
      },
      "source": [
        "# remove a key-value pair\n",
        "del city['Cantonment']\n",
        "# print\n",
        "city"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SwXfabJLzIXq"
      },
      "source": [
        "Homework - *remove also work in another method `.pop(key_name)`*"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b0R1pVjVz0cW"
      },
      "source": [
        "## Compare two dictionaries\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xeuK7GbCzDvg"
      },
      "source": [
        "country_capitals1 = {'Belgium': 'Brussels','Haiti': 'Port-au-Prince'}\n",
        "country_capitals2 = {'Nepal': 'Kathmandu', 'Uruguay': 'Montevideo'}"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DLd52zmWz4eI"
      },
      "source": [
        "country_capitals1 == country_capitals2"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l-ixSKUrz5N6"
      },
      "source": [
        " country_capitals3 = {'Haiti': 'Port-au-Prince', 'Belgium': 'Brussels'}"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hppLYbLU0Bgq"
      },
      "source": [
        "country_capitals1 == country_capitals3"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gjC-muCfT_Mg"
      },
      "source": [
        "# Set"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MAXw-moh0CCi"
      },
      "source": [
        "colors = {'red', 'orange', 'yellow', 'green', 'red', 'blue'}\n",
        "colors"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zloY-0dQ3DNy"
      },
      "source": [
        "oho - set is already sorted "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "elvKqfKN3PLN"
      },
      "source": [
        "len(colors)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iUbYiN7x3Afw"
      },
      "source": [
        "'red' in colors"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AQODOcbp3WPh"
      },
      "source": [
        "'purple' in colors"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4ktSFKpAbXR1"
      },
      "source": [
        "`.upper()` used for uppercase all charachters/letters"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "udQNQKSS3OIw"
      },
      "source": [
        "for color in colors:\n",
        "  print(color.upper(), end=' ')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zzpjF9sRaVrZ"
      },
      "source": [
        "### Set methods"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3rBjipkmZifJ"
      },
      "source": [
        "numbers = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-oMCoA5RaBtg"
      },
      "source": [
        "numbers"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "betXHVGzZ9c0"
      },
      "source": [
        "# Add element\n",
        "numbers.add(17)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_sSozTGVaBIw"
      },
      "source": [
        "numbers.add(3)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q623bre9aGVT"
      },
      "source": [
        "# Remove specific element\n",
        "numbers.remove(3)\n",
        "numbers"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dO9SxHlZaLm8"
      },
      "source": [
        "# Remove first element\n",
        "numbers.pop()\n",
        "numbers"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V8C-GEToaN1K"
      },
      "source": [
        "# Empty set \n",
        "numbers.clear()\n",
        "# return an empty set\n",
        "numbers"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "L0luCOzIX49h"
      },
      "source": [
        "## Comparing sets"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xAgfR6Py3Xzg"
      },
      "source": [
        "{1, 3, 5} == {3, 5, 1}"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rYYeqmNdUE7U"
      },
      "source": [
        "{1, 3, 5} != {3, 5, 1}"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FQAkTMQ_XoXk"
      },
      "source": [
        "{1, 3, 5}.issubset({3, 5, 1})"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d2mpSb3OXrwO"
      },
      "source": [
        "{1, 2}.issubset({3, 5, 1})"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-9aPZT3VXvtE"
      },
      "source": [
        "{1, 3, 5}.issuperset({3, 5, 1})"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0yuW3MOHXzda"
      },
      "source": [
        "{1, 3, 5}.issuperset({3, 2})"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7XEKW51TYAvI"
      },
      "source": [
        "### Union\n",
        "The union of two sets is a set consisting of all the unique elements from both sets. You can calculate the union with the | operator or with the set typeâ€™s `union` method:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oW16GQHlYKFk"
      },
      "source": [
        "{1, 3, 5} | {2, 3, 4}"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pF_yCy6aYOjk"
      },
      "source": [
        "{1, 3, 5}.union([20, 20, 3, 40, 40])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p6ktymCoYU4C"
      },
      "source": [
        "### Intersection\n",
        "The intersection of two sets is a set consisting of all the unique elements that the two sets\n",
        "have in common. You can calculate the intersection with the & operator or with the set\n",
        "typeâ€™s `intersection` method"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "___0_7eNYXn7"
      },
      "source": [
        "{1, 3, 5} & {2, 3, 4}"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Lr4Eq4ybZA94"
      },
      "source": [
        "{1, 3, 5}.intersection([1, 2, 2, 3, 3, 4, 4])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "evwQyo2KYg38"
      },
      "source": [
        "### Difference\n",
        "The difference between two sets is a set consisting of the elements in the left operand that\n",
        "are not in the right operand. You can calculate the difference with the - operator or with\n",
        "the set typeâ€™s `difference` method:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4LSyVbwZYhfV"
      },
      "source": [
        "{1, 3, 5} - {2, 3, 4}"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ElGbiClQZJpq"
      },
      "source": [
        "{1, 3, 5, 7}.difference([2, 2, 3, 3, 4, 4])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xPVAiErJYrXV"
      },
      "source": [
        "### Disjoint\n",
        "Two sets are disjoint if they do not have any common elements. You can determine this\n",
        "with the set typeâ€™s `isdisjoint` method:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sgm2gCTBYtlE"
      },
      "source": [
        "{1, 3, 5}.isdisjoint({2, 4, 6})"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sJbpf47vZR7u"
      },
      "source": [
        "{1, 3, 5}.isdisjoint({4, 6, 1})"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}